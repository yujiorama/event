#+TITLE:Think about UnitTest in 能楽ホール (#鹿駆動)
#+AUTHOR:Yuji Okazawa (released engineer)
#+EMAIL:yujiorama_at_gmail.com
#+OPTIONS: H:1
* こういう話は残念なのでしません
 - ウォーターフォールプロセスで *PG/PT* がひとまとめ!
 - 予想バグ数(with ステップ数)!
* ユニットテストで何を書く?
何故かいろいろあるので共通点を見つけます。
* [[http://ja.wikipedia.org/wiki/%E3%82%BD%E3%83%95%E3%83%88%E3%82%A6%E3%82%A7%E3%82%A2%E3%83%86%E3%82%B9%E3%83%88#.E5.8D.98.E4.BD.93.E3.83.86.E3.82.B9.E3.83.88.E3.81.A8.E7.B5.90.E5.90.88.E3.83.86.E3.82.B9.E3.83.88][Wikipediaに学ぶユニットテスト]]
#+BEGIN_QUOTE
単体テスト、あるいはユニットテストとは、メソッドなどの小さな単位で行うテストのことである。単体テストは、ホワイトボックス
テストを利用して行われる場合が多い。「Unit Testing」の略である「UT」と呼ばれることが多い。また、開発現場によっては
「CT（和製:Coding Test）」や「PT（和製:Program Test）」と略されることもある。
#+END_QUOTE
* [[http://msdn.microsoft.com/ja-jp/library/aa292197(VS.71(.aspx][MSDNに学ぶユニットテスト]]
#+BEGIN_QUOTE
単体テストの主な目標は、アプリケーションのテスト可能な最小ユニットを取り出して残りのコードから分離し、それが予定どおり
の動作をするかどうかを調べることです。まず各ユニットを個別にテストしてから、これらをモジュールに結合し、モジュール間の
インターフェイスをテストします。単体テストの間にかなりの割合の欠陥が識別されるため、単体テストは重要です。
#+END_QUOTE
* 小さな単位
 - 長大な処理の手続き(日本語)をそのままプロダクションコードにするとか...ありえませんよね?
 - *1 つの仕事をする* のが大事
 - *小さい* の認識を extreme にしよう!
* ホワイトボックステスト
 - _パスカバレッジの確保が主眼_ (遠い目)
 - テストが無いコードはレガシー(ry
 - テストエンジニアの人と意見が合わなそうな点
* ユニットテストをしかける場所
 - *ユニット* のインターフェース
 - レイヤアーキテクチャの境目
  - ちょっと前までは上層から下層に至るレイヤーをイメージしてました
* [[http://msdn.microsoft.com/en-us/library/Ee817664(pandp.10).aspx][Application Architecture for .NET]]
file:./IC84533.gif
[[http://i.msdn.microsoft.com/dynimg/IC84533.gif][*Figure 1.0.* Component layers found in distributed applications and services built with .NET]]
* J2EE:基本レイヤ
file:./j2ee.png
* [[http://www.martinfowler.com/eaaCatalog/serviceLayer.html][PofEAA:ServiceLayer]]
file:./ServiceLayerSketch.gif
* DDD:Layerd Architecture
[[file://./ArchitectureDiagram_lg.gif]]
[[http://www.infoq.com/jp/articles/ddd-in-practice][ドメイン駆動設計・開発の実践]]
* ユニットテストをしかける場所
 - 最近の関心は一次元層上のレイヤーより同心円
 - ドメインオブジェクトが中心
  - *業務ロジック* はドメインオブジェクトの中に閉じこめる
 - 外部リソースはアダプタを経由するのでモックしやすい
  - ユニットテスト向きですね
* Growing Object-Oriented Software, Guided by Tests
*Figure 6.1* An application's core domain model is mapped onto technical infrastructure.
[[file:centercircle.png]]
* Ports And Adapters
 - [[http://alistair.cockburn.us/Hexagonal%2Barchitecture][Alistair Cockburn: "Hexagonal Architecture"]]
[[file:2304.gif]]
* Let's Try!
 - GOOS 写経
 - その他の言語で(できんのかな？)

